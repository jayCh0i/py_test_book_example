# 각 화폐 단위별로 1원부터 구하고자 하는 수까지 점화식으로 최소 화폐 개수를 찾아나간다.
# 현재 금액에서 단위 금액을 뺀 금액의 최소 화폐 개수를 DP 테이블에서 활용하여
# 이미 구한 값과 새로 구한값중에 더 나은 값을 찾는 방식으로 알고리즘을 구현하면 된다.

# 불가능 값으로 사용 할 상수 선언
INIT = 99999

# 단위 개수, 금액 입력 받음
n, m = map(int, input().split())

# 단위 테이블 초기화
units = []
# DP 테이블 초기화
dp_table = [INIT] * (m+1)
# 반복 문제에서 벗어나는 예외 단계는 직접 입력
dp_table[0] = 0

# 화폐 단위 입력
for i in range(n):
    # 입력 받아 바로 리스트에 추가
    units.append(int(input()))

# 화폐 단위별로 전체 리스트를 계산할것임
for i in range(n):
    unit = units[i]
    # 단위보다 작은 금액은 계산 불가하므로 unit 부터 반복한다
    # 인덱스 j는 현재 금액으로도 사용한다(j=2일 경우 2원)
    for j in range(unit, m+1):
        # 현재 단위로 계산된 값과 이미 구한 값중에서 최소값으로 갱신한다
        ## 현재 금액(j)에서 단위 금액(unit)을 뺀 금액(j-unit)의 DP 테이블 값을 활용한다
        ## +1 은 현재 연산을 포함하기 위함이다
        dp_table[j] = min(dp_table[j], dp_table[j-unit] + 1)