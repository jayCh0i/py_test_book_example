# DFS(깊이 우선 탐색)는 그래프에서 최대한 멀리 있는 노드를 탐색하는것이 우선되며
# 가장 깊이 위치하는 노드에 닿을때 까지 탐색을 진행하고 방문하지 않은 다른 인접 노드를 확인
# 모두 방문했다면 부모 노드로 올라가서 다른 인접 노드들을 확인 이를 반복한다.
# 스택을 이용하는 알고리즘이기 때문에 '재귀 함수'를 이용해 간결하게 구현 가능하다
## 진행 과정이 한 쪽으로 쭉 뻗어나가고 다른 쪽으로 뻗어나가는 모양새로 진행된다.
### 작동 방식이 노드에 연결된 모든 인접 노드들을 확인 해봐야므로 '인접 리스트' 방식이 적합하다

# DFS 재귀 함수 구현
def dfs(graph, v, visited):
    # 현재 노드 방문 처리
    visited[v] = True
    # 현재 처리중인 노드 출력
    print(v, end=' ')

    # 인접 노드 탐색
    for i in graph[v]:
        # 인접 노드가 방문하지 않은 경우에 계속 진행
        if not visited[i]:
            # 인접 노드에 대해 DFS 실행
            dfs(graph, i, visited)

# 노드 연결 정보를 담은 인접 리스트 선언
graph = [
    [],
    [2, 3, 8],
    [1, 7],
    [1, 4, 5],
    [3, 5],
    [3, 4],
    [7],
    [2, 6, 8],
    [1, 7],
]
# 노드 방문 정보 리스트 초기화
visited = [False] * 9

# DFS 실행
dfs(graph, 1, visited)